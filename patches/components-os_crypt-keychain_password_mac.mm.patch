diff --git a/components/os_crypt/keychain_password_mac.mm b/components/os_crypt/keychain_password_mac.mm
index 00fe8402c3357e08e69336752133aeb69bbc027b..0a3cf99e489abf003729e110f39bb4056d270ba5 100644
--- a/components/os_crypt/keychain_password_mac.mm
+++ b/components/os_crypt/keychain_password_mac.mm
@@ -7,6 +7,7 @@
 #import <Security/Security.h>
 
 #include "base/base64.h"
+#include "base/command_line.h"
 #include "base/mac/mac_logging.h"
 #include "base/rand_util.h"
 #include "components/os_crypt/encryption_key_creation_util.h"
@@ -50,8 +51,8 @@ std::string AddRandomPasswordToKeychain(const AppleKeychain& keychain,
 const char KeychainPassword::service_name[] = "Chrome Safe Storage";
 const char KeychainPassword::account_name[] = "Chrome";
 #else
-const char KeychainPassword::service_name[] = "Chromium Safe Storage";
-const char KeychainPassword::account_name[] = "Chromium";
+const char KeychainPassword::service_name[] = "Brave Safe Storage";
+const char KeychainPassword::account_name[] = "Brave";
 #endif
 
 KeychainPassword::KeychainPassword(
@@ -62,8 +63,20 @@ KeychainPassword::KeychainPassword(
 KeychainPassword::~KeychainPassword() = default;
 
 std::string KeychainPassword::GetPassword() const {
-  DCHECK(key_creation_util_);
-
+  const char *service_name, *account_name;
+  base::CommandLine* command_line = base::CommandLine::ForCurrentProcess();
+  if (command_line->HasSwitch("import-chrome")) {
+    service_name = "Chrome Safe Storage";
+    account_name = "Chrome";
+  } else if (command_line->HasSwitch("import-chromium") ||
+             command_line->HasSwitch("import-brave")) {
+    service_name = "Chromium Safe Storage";
+    account_name = "Chromium";
+  } else {
+    service_name = ::KeychainPassword::service_name;
+    account_name = ::KeychainPassword::account_name;
+    DCHECK(key_creation_util_);
+  }
   UInt32 password_length = 0;
   void* password_data = NULL;
   OSStatus error = keychain_.FindGenericPassword(
@@ -85,7 +98,11 @@ std::string KeychainPassword::GetPassword() const {
     return password;
   }
 
-  key_creation_util_->OnKeychainLookupFailed();
+  // If we're in the importer utility process, key_creation_util_ is nullptr
+  // because it requires a PrefService and therefore can only be created in the
+  // browser process; do not dereference.
+  if (key_creation_util_)
+    key_creation_util_->OnKeychainLookupFailed();
   OSSTATUS_DLOG(ERROR, error) << "Keychain lookup failed";
   return std::string();
 }
